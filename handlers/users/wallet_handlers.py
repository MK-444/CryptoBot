# aiogram
from aiogram.dispatcher.filters import Text
from aiogram.types import  CallbackQuery
from aiogram import Bot, Dispatcher, executor, types 
from aiogram.types import ReplyKeyboardRemove, ParseMode
from aiogram.dispatcher import FSMContext
from aiogram.types.message import ContentType
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# python libraries
import logging 
import pyotp
import os 

# pip install libraries
from py_currency_converter import convert
from pycoingecko import CoinGeckoAPI
from dotenv import load_dotenv

# import files
from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode

from keyboards.inline.exchange_inline import *
from keyboards.inline.wallet_inline import *
from keyboards.inline.base_inline import *
from keyboards.inline.settings_inline import *
from keyboards.inline.info_inline import *
from keyboards.default.default import *
from functions.message import *
from functions import *
from states.state import *
from loader import dp, bot
from utils.db_api import db_commands
import uuid

# from aiogram.contrib.middlewares.i18n import I18nMiddleware
# from pathlib import Path


# BASE_DIR = Path(__file__).parent
# I18N_DOMAIN = 'cryptobot'
# LOCALES_DIR = BASE_DIR / 'locales'
# i18n = I18nMiddleware(I18N_DOMAIN, LOCALES_DIR)
# dp.middleware.setup(i18n)
# _ = i18n.gettext

id_transaction = uuid.uuid4().hex[:9]


# ========================== üëù Wallet ========================
@dp.message_handler(Text(equals='üëù Wallet'))
async def deposit_wallet(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message_id)
    await message.answer(msc, reply_markup=await wallet_buttons()) 

# =============== üì• Deposit ============
@dp.callback_query_handler(text='deposit')
async def deposit(callback: types.CallbackQuery):
    """=============== üì• Deposit ============"""
    await callback.message.answer('–í—ã–±—Ä–∞–Ω–æ: üì•–ü–æ–ø–æ–ª–Ω–∏—Ç—å')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å', reply_markup=await buy_btn())
    await Buy.buy_confirm.set()


# =========== üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å -> USD ==============
@dp.callback_query_handler(text='usd', state=Buy.buy_confirm)
async def deposit_usd(callback: types.CallbackQuery, state: FSMContext):
    """=========== üì• Deposti -> USD =============="""
    await callback.message.answer("–í—ã–±—Ä–∞–Ω–æ: *USD*", parse_mode=types.ParseMode.MARKDOWN)
    await callback.message.answer(usd, reply_markup=await get_usd())

    
    
    
# ======== üì• Deposit -> USD -> CZK - USD ===========
@dp.callback_query_handler(text='czk', state="*")
async def deposit_czk(callback: types.CallbackQuery, state: FSMContext):
    """======== üì• Deposit -> USD -> CZK - USD ========"""
    await callback.message.answer('–í—ã–±—Ä–∞–Ω–æ: *CZK -> USD*', parse_mode=types.ParseMode.MARKDOWN)
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –≤ —á–µ–º —É–¥–æ–±–Ω–µ–µ –≤–≤–æ–¥–∏—Ç—å —Å—É–º–º—É:', reply_markup= await get_pay(), parse_mode=types.ParseMode.MARKDOWN)
    

# =========== üì• Deposit -> USD -> CZK - USD -> The amount I give =======
@dp.callback_query_handler(text='give', state="*")
async def give_usd_czk(callback: types.CallbackQuery, state: FSMContext):
    """=========== üì• Deposit -> USD -> CZK - USD -> The amount I give ======="""
    await Usd.give.set()
    await callback.message.answer(czk_give, reply_markup= await cancel_btn())
    
    
# ========= The amount I give=======
@dp.message_handler(state=Usd.give)
async def give_usd(message: types.Message, state: FSMContext):
    """========= The amount I give ======="""
    global your_amount
    your_amount = message.text
    try:
        if int(your_amount) >= 2500:
            currency_give = 'CZK'
            currency_get = 'USD'
            global currency
            currency = float(float(your_amount) / float(value))
            deposit_process = f"–î–µ–ø–æ–∑–∏—Ç #USD —Å–æ–∑–¥–∞–Ω!\n\
ID: #{id_transaction}\n\
\n\
–°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è üåÄ\n\
\n\
–°—É–º–º–∞ –æ—Ç–¥–∞—é: *{your_amount} {currency_give}* \n\
–°—É–º–º–∞ –ø–æ–ª—É—á–∞—é: *{'{:.2f}'.format(currency)} {currency_get}*\n\
–ö–æ–º–∏—Å—Å–∏—è: 25 CZK\n\
\n\
–ú–µ—Ç–æ–¥:\n\
    `2502061515/2010` –∏–∑ —á–µ—Ö–∏–∏,\n\
    IBAN:`CZ5620100000002002416156`\n\
    BIC/SWIFT:`FIOBCZPPXXX`"
            await message.answer(deposit_process, reply_markup=await all_right_btn(), parse_mode=types.ParseMode.MARKDOWN)
        else:
            await message.answer('Minimum 2500')
    except:
        print('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞')
        

    
# ==================== ‚úñÔ∏è Cancel ==============
@dp.callback_query_handler(text='cancel', state=Usd.cancel)
async def cancel(callback: types.CallbackQuery, state:FSMContext):
    await callback.message.answer(msc, reply_markup=await wallet_buttons())
    

# =================== Rightüëåüèª ==================
@dp.callback_query_handler(text='right', state=Send.right_confirm)
async def deposit_czk(callback: types.CallbackQuery, state: FSMContext):
    """======== Rightüëåüèª ========"""
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –≤ —á–µ–º —É–¥–æ–±–Ω–µ–µ –≤–≤–æ–¥–∏—Ç—å —Å—É–º–º—É:', reply_markup= await get_pay())
    await Send.send_pay.set()


# ======== üì• Deposit -> USD -> CZK - USD -> The amount I get =========
@dp.callback_query_handler(text='get', state="*")
async def get_money(callback: types.CallbackQuery, state: FSMContext):
    """======== üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å -> USD -> CZK - USD -> The amount I get ========="""
    await Usd.get.set()
    await callback.message.answer(usd_get, reply_markup= await cancel_btn())

# ======== The amount I get =========
@dp.message_handler(state=Usd.get)
async def get_money_usd(message: types.Message, state: FSMContext):
    """======== The amount I get ========="""
    your_amount = message.text
    try: 
        if int(your_amount) >= 100:
            currency_give = 'USD'
            currency_get = 'CZK'
            currency = float(float(your_amount) * float(value))
            deposit_process = f"–î–µ–ø–æ–∑–∏—Ç #USD —Å–æ–∑–¥–∞–Ω!\n\
ID: #{id_transaction}\n\
\n\
–°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è üåÄ\n\
\n\
–°—É–º–º–∞ –ø–æ–ª—É—á–∞—é: *{your_amount} {currency_give}* \n\
–°—É–º–º–∞ –æ—Ç–¥–∞—é: *{'{:.2f}'.format(currency)} {currency_get}*\n\
–ö–æ–º–∏—Å—Å–∏—è: 25 CZK\n\
\n\
–ú–µ—Ç–æ–¥:\n\
    `2502061515/2010` –∏–∑ —á–µ—Ö–∏–∏,\n\
    IBAN:`CZ5620100000002002416156`\n\
    BIC/SWIFT:`FIOBCZPPXXX`"
            await message.answer(deposit_process, reply_markup=await all_right_btn(), parse_mode=types.ParseMode.MARKDOWN)
        else:
            await message.answer('Minimum 100')
    except:
        print('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞')



# ========== üì• Deposit -> USD -> Bank transfer in the Czech Republic =======
@dp.callback_query_handler(text='banking', state="*")
async def deposit_banking(callback: types.CallbackQuery, state:FSMContext):
    """========== üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å -> USD -> Bank transfer in the Czech Republic ======="""
    await callback.message.answer('–í—ã–±—Ä–∞–Ω–æ: *–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–º–∫–∞—Ö –ß–µ—Ö–∏–∏*', parse_mode=types.ParseMode.MARKDOWN)
    # await callback.message.answer(online_banking, reply_markup=await get_pay())
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –≤ —á–µ–º —É–¥–æ–±–Ω–µ–µ –≤–≤–æ–¥–∏—Ç—å —Å—É–º–º—É:', reply_markup= await get_pay())
    await callback.message.edit_reply_markup(reply_markup=None)
    
    
    
# ========== üì• Deposit -> USD -> IBAN + BIC/SWIFT ============
@dp.callback_query_handler(text='iban', state="*")
async def deposit_iban(callback: types.CallbackQuery, state:FSMContext):
    """========== üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å -> USD -> IBAN + BIC/SWIFT ============"""
    await callback.message.answer('–í—ã–±—Ä–∞–Ω–æ: *IBAN + BIC/SWIFT*', parse_mode=types.ParseMode.MARKDOWN)
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –≤ —á–µ–º —É–¥–æ–±–Ω–µ–µ –≤–≤–æ–¥–∏—Ç—å —Å—É–º–º—É:', reply_markup= await get_pay())
  
    
    
    
# ========= üì• Deposit -> USD -> Cash ===========
@dp.callback_query_handler(text='nalichka', state="*")
async def deposit_cash(callback: types.CallbackQuery, state:FSMContext):
    """========= üì• Deposit -> USD -> Cash ==========="""
    await callback.message.answer('–í—ã–±—Ä–∞–Ω–æ: *–ù–∞–ª–∏—á–Ω—ã–µ*', parse_mode=types.ParseMode.MARKDOWN)
    markup = InlineKeyboardMarkup(row_width=1)
    btn1 = InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", callback_data="write", url='tg://user?id=430859244')
    btn2 = InlineKeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    markup.add(btn1, btn2)
    await callback.message.answer(nalichka, reply_markup=markup, parse_mode=types.ParseMode.MARKDOWN)
    await callback.message.edit_reply_markup(reply_markup=None)
    


# ============ üì• Deposit -> USDT ==========
@dp.callback_query_handler(text='usdt')
async def deposit_usdt(callback: types.CallbackQuery):
    """============ üì• Deposit -> USDT =========="""
    await callback.message.answer('–í—ã–±—Ä–∞–Ω–æ: *USDT*', reply_markup=await get_credit_card(), parse_mode=types.ParseMode.MARKDOWN)
    # await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–∞—Ç—å')
    await callback.message.edit_reply_markup(reply_markup=None)
    
    
# ========== üì• Deposit -> USDT -> Visa/Master ============
@dp.callback_query_handler(text='master')
async def deposit_mastercard(callback: types.CallbackQuery):
    """========== üì• Deposit -> USDT -> Visa/Master ============"""
    await callback.message.answer('–í—ã–±—Ä–∞–Ω–æ: *Visa/Master*', parse_mode=types.ParseMode.MARKDOWN)
    markup = InlineKeyboardMarkup(row_width=1)
    btn1 = InlineKeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    markup.add(btn1)
    await callback.message.answer('In Process üë©‚Äçüíª', reply_markup=markup)
    # await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤ —á–µ–º —É–¥–æ–±–Ω–µ–µ –≤–≤–æ–¥–∏—Ç—å —Å—É–º–º—É:', reply_markup=await get_pay())
    await callback.message.edit_reply_markup(reply_markup=None)



# ============= üì• Deposit -> USDT -> Visa/Master P24 ==========
@dp.callback_query_handler(text='masterp24')
async def deposit_mastercardp24(callback: types.CallbackQuery):
    """============= üì• Deposit -> USDT -> Visa/Master P24 =========="""
    await callback.message.answer('–í—ã–±—Ä–∞–Ω–æ: *Visa/Master P24*', parse_mode=types.ParseMode.MARKDOWN)
    markup = InlineKeyboardMarkup(row_width=1)
    btn1 = InlineKeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    markup.add(btn1)
    await callback.message.answer('*In Process* üë©‚Äçüíª', reply_markup=markup, parse_mode=types.ParseMode.MARKDOWN)
    await callback.message.edit_reply_markup(reply_markup=None)




cryptocurrency = {
        'usd': 'USD',
        'btc': 'Bitcoin BTC',
        'ltc': 'Litecoin LTC',
        'eth': 'Ethereum ETH',
        'aave':'AAVE',
        'ape':'APE-(ApeCoin, ERC20)',
        'usdt':'Tether USDT ERC20',
        'usdc':'USDC ERC20',
        'comp':'COMP-Compound, ERC20',
        'crv':'CRV-Curve DAO Token ERC20',
        'dai': 'DAI',
        'doge':'Dogecoin (Doge)',
        'eth_clasic':'Ethereum Classic #1',
        'gala':'Gala',
        'chz':'CHZ-chiliZ',
        'link':'LINK, CHAIN LINK ERC20',
        'near':'Near Protocol ERC20',
        'usdp':'Pax Dollar USDP',
        'snx':'SNX (Synthetix ,ERC20)',
        'sushi':'SUSHI-SushiToken, ERC20',
        'uni':'UNI-Uniswap ERC20',
        'usdc-usd':'USDC USD COIN ERC2O',
        'wbtc':'WBTC-Wrapped BTC (ERC20)',
        'yfi':'YFI-yearn.finance, ERC20',
        'usd-coin':'USD COIN (USDC ERC20)'
    }



# ============ üì• Deposit -> BTC ============
@dp.callback_query_handler(lambda c: True, state=Buy.buy_confirm)
async def deposit_btc(callback: types.CallbackQuery):
    """========== üì• Deposit -> BTC ============"""
    data = callback.data
    if data in cryptocurrency.keys():
        btc_msg = f"\n\
–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å: *{cryptocurrency[data]}*\n\
\n\
Min: *0.001* \n\
–ö–æ–º–∏—Å—Å–∏—è: *0*\n\
\n\
–ú–µ—Ç–æ–¥: *{cryptocurrency[data]}*\n\
\n\
‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ\n\
–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ 3 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π\
"
        await callback.message.answer(f'–í—ã–±—Ä–∞–Ω–æ: *{cryptocurrency[data]}*', parse_mode=types.ParseMode.MARKDOWN)
        await callback.message.answer(btc_msg, reply_markup=await get_btc(), parse_mode=types.ParseMode.MARKDOWN)
        await Buy.qrcode.set()



# ======= üì• Deposit -> BTC -> Get a wallet address ==========
@dp.callback_query_handler(text='confirm_send', state=Buy.qrcode)
async def confirm_btc(callback: types.CallbackQuery, state:FSMContext):
    """======= üì• Deposit -> BTC -> Get a wallet address =========="""
    p = open('./functions/qrcodes/MyQRCode1.png', 'rb')
    await bot.send_photo(callback.from_user.id, photo=p, caption=btc, parse_mode=ParseMode.MARKDOWN)
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.finish()
    
    
    
# ============ üì• Deposit -> LTC ==============
@dp.callback_query_handler(text='ltc')
async def get_deposit_ltc(callback: types.CallbackQuery):
    """============ üì• Deposit -> LTC =============="""
    await callback.message.answer('–í—ã–±—Ä–∞–Ω–æ: *LTC*', parse_mode=types.ParseMode.MARKDOWN)
    await callback.message.answer('–í—ã–±—Ä–∞–Ω–æ: *Litecoin*', parse_mode=types.ParseMode.MARKDOWN)
    await callback.message.answer(deposit_ltc, reply_markup=await get_btc())
    await callback.message.edit_reply_markup(reply_markup=None)
    
    
# ============ üì• Deposit -> LTC -> confirm ==============
@dp.callback_query_handler(text='confirm_send')
async def confirm_ltc(callback: types.CallbackQuery):
    """============ üì• Deposit -> LTC -> confirm =============="""
    p = open('MKcryptoBot/functions/qrcodes/MyQRCode1.png', 'rb')
    await bot.send_photo(callback.from_user.id, photo=p, caption=btc, parse_mode=ParseMode.MARKDOWN)
    await callback.message.edit_reply_markup(reply_markup=None)



# ================= üì§ Withdraw  =====================
@dp.callback_query_handler(text='send')
async def send(callback: types.CallbackQuery):
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:', reply_markup=await buy_btn())
    await Send.send.set()
    
    
# ================= üì§ Withdraw -> Crypto =====================
@dp.callback_query_handler(lambda c: True, state=Send.send)
async def choose_crypto(callback: types.CallbackQuery):
    data = callback.data
    if data in cryptocurrency.keys():
        global send_crypto 
        send_crypto = cryptocurrency[data]
        await callback.message.answer(f'–í—ã–±—Ä–∞–Ω–æ: *{send_crypto}*', parse_mode=types.ParseMode.MARKDOWN)
        markup = InlineKeyboardMarkup(row_width=1)
        btn1 = InlineKeyboardButton(text=send_crypto, callback_data="send_crypto")
        btn2 = InlineKeyboardButton(text="–ù–∞–ª–∏—á–Ω—ã–µ", callback_data="nalichka")
        btn3 = InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
        markup = markup.add(btn1, btn2, btn3)
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥', reply_markup=markup)
        await Send.get_method.set()


# ================= üì§ Withdraw  -> Crypto -> Crypto/–°ash =====================
@dp.callback_query_handler(lambda c: True, state=Send.get_method)
async def method_send(callback: types.CallbackQuery):
    method = {
    'send_crypto':send_crypto,
    'nalichka': '–ù–∞–ª–∏—á–Ω—ã–µ'}
    data = callback.data
    if data in method.keys():
        global send_method 
        send_method = method[data]
        await callback.message.answer(f'–í—ã–±—Ä–∞–Ω–æ: *{send_method}*', parse_mode=types.ParseMode.MARKDOWN)
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫')
        await Send.get_address.set()
        

# ================= üì§ Withdraw -> Crypto -> Wallet =====================
@dp.message_handler(state=Send.get_address)
async def give_usd(message: types.Message, state: FSMContext):
    """================= üì§ Withdraw -> Crypto -> Wallet ====================="""
    global your_address
    your_address = message.text
    try:
        if len(your_address) >= 26:
            send_confirm = f"\n\
–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤—ã–≤–µ—Å—Ç–∏: *{send_crypto}*\n\
\n\
Min: 0.001 \n\
–ö–æ–º–∏—Å—Å–∏—è: 0\n\
\n\
–ú–µ—Ç–æ–¥: *{send_crypto}*\n\
–ê–¥—Ä–µ—Å: *{your_address}*\n\
\n\
‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ\n\
–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ 3 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"
            await message.answer(send_confirm, reply_markup=await confirm_btn(), parse_mode=types.ParseMode.MARKDOWN)
            await Send.all_right.set()
        else:
            await message.answer('Minimum lenght 26')
    except:
        await message.answer('–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ')


# =================== Right üëåüèª ==================
@dp.callback_query_handler(text='right', state=Send.all_right)
async def all_right(callback: types.CallbackQuery, state: FSMContext):
    """========  ========"""
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –≤ —á–µ–º —É–¥–æ–±–Ω–µ–µ –≤–≤–æ–¥–∏—Ç—å —Å—É–º–º—É:', reply_markup= await get_pay(), parse_mode=types.ParseMode.MARKDOWN)
    await Send.send_pay.set()


# =========== The amount I give =======
@dp.callback_query_handler(text='give', state=Send.send_pay)
async def give_usd_czk(callback: types.CallbackQuery, state: FSMContext):
    """=========== The amount I give ======="""
    await Send.send_give.set()
    await callback.message.answer(czk_give, reply_markup= await cancel_btn())
    
    
# ========= The amount I give =======
@dp.message_handler(state=Send.send_give)
async def give_usd(message: types.Message, state: FSMContext):
    """========= The amount I give ======="""
    global your_amount
    your_amount = message.text
    try:
        if int(your_amount) >= 2500:
            currency_give = 'CZK'
            currency_get = 'USD'
            global currency
            currency = float(float(your_amount) / float(value))
            if send_crypto == 'USD':
                deposit_process = f"–ó–∞—è–≤–∫–∞ #{send_crypto} –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!\n\
ID: #{id_transaction}\n\
\n\
–°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è üåÄ\n\
\n\
–°—É–º–º–∞ –æ—Ç–¥–∞—é: *{your_amount} {currency_give}* \n\
–°—É–º–º–∞ –ø–æ–ª—É—á–∞—é: *{'{:.2f}'.format(currency)} {currency_get}*\n\
–ö–æ–º–∏—Å—Å–∏—è: *25 CZK*\n\
\n\
–ú–µ—Ç–æ–¥:\n\
    `2502061515/2010` –∏–∑ —á–µ—Ö–∏–∏,\n\
    IBAN:`CZ34 2010 0000 0025 0206 1515`\n\
    BIC/SWIFT:`FIOBCZPPXXX`"
            else:
                deposit_process = f"–ó–∞—è–≤–∫–∞ #{send_crypto} –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!\n\
        ID: #{id_transaction}\n\
        \n\
        –°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è üåÄ\n\
        \n\
        –°—É–º–º–∞ –æ—Ç–¥–∞—é: *{your_amount} {currency_give}* \n\
        –°—É–º–º–∞ –ø–æ–ª—É—á–∞—é: *{'{:.2f}'.format(currency)} {currency_get}*\n\
        –ö–æ–º–∏—Å—Å–∏—è: 1 *{send_crypto}*\n\
        \n\
        C–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞: *{send_crypto}*\n\
        \n\
        –ê–¥—Ä–µ—Å: *{your_address}*"
            await message.answer(deposit_process, reply_markup=await confirm_btn(), parse_mode=types.ParseMode.MARKDOWN)
            await Send.end_right.set()
        else:
            await message.answer('Minimum 2500')
    except:
        print('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞')



# ======== üì• Deposit -> USD -> CZK - USD -> The amount I get =========
@dp.callback_query_handler(text='get', state=Send.send_pay)
async def get_money(callback: types.CallbackQuery, state: FSMContext):
    """======== üì• Deposit -> USD -> CZK - USD -> The amount I get ========="""
    await Send.send_get.set()
    await callback.message.answer(usd_get, reply_markup= await cancel_btn())

# ======== The amount I get =========
@dp.message_handler(state=Send.send_get)
async def get_money_usd(message: types.Message, state: FSMContext):
    """======== The amount I get ========="""
    your_amount = message.text
    try:
        if int(your_amount) >= 2500:
            currency_give = 'USD'
            currency_get = 'CZK'
            currency = float(float(your_amount) * float(value))
            deposit_process = f"–î–µ–ø–æ–∑–∏—Ç #USD —Å–æ–∑–¥–∞–Ω!\n\
        ID: #{id_transaction}\n\
        \n\
        –°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è üåÄ\n\
        \n\
        –°—É–º–º–∞ –ø–æ–ª—É—á–∞—é: *{your_amount} {currency_give}* \n\
        –°—É–º–º–∞ –æ—Ç–¥–∞—é: *{'{:.2f}'.format(currency)} {currency_get}*\n\
        –ö–æ–º–∏—Å—Å–∏—è: *25 CZK*\n\
        \n\
        –ú–µ—Ç–æ–¥:\n\
            `2502061515/2010` –∏–∑ —á–µ—Ö–∏–∏,\n\
            *IBAN:*`CZ34 2010 0000 0025 0206 1515`\n\
            *BIC/SWIFT:*`FIOBCZPPXXX`"
            
            await message.answer(deposit_process, reply_markup=await all_right_btn(), parse_mode=types.ParseMode.MARKDOWN)
            await Send.end_right.set()
        else:
            await message.answer('Minimum 2500')
    except:
        print('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞')
            

# =================== All right üëåüèª ==================
@dp.callback_query_handler(text='all_right', state=Send.end_right)
async def all_right_end(callback: types.CallbackQuery, state:FSMContext):
    """========  ========"""
    await callback.message.answer(f'‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
    await callback.message.answer(msc, reply_markup= await wallet_buttons())
    await state.finish()
    
    
# =========== üì• Deposit -> USD ==============
@dp.callback_query_handler(text='usd', state=Send.send_usd)
async def deposit_usd(callback: types.CallbackQuery, state:FSMContext):
    """=========== üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å -> USD =============="""
    await callback.message.answer('–í—ã–±—Ä–∞–Ω–æ: *USD*', parse_mode=types.ParseMode.MARKDOWN)
    await callback.message.answer(usd, reply_markup=await get_usd())
    await Send.send_usd_banking.set()
    
    
# ========== üì• Deposit -> USD -> Bank transfer in the Czech Republic =======
@dp.callback_query_handler(text='banking', state=Send.send_usd_banking)
async def deposit_banking(callback: types.CallbackQuery, state:FSMContext):
    """========== üì• Deposti -> USD -> Bank transfer in the Czech Republic ======="""
    await callback.message.answer('–í—ã–±—Ä–∞–Ω–æ: *–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–º–∫–∞—Ö –ß–µ—Ö–∏–∏*', parse_mode=types.ParseMode.MARKDOWN)
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –≤ —á–µ–º —É–¥–æ–±–Ω–µ–µ –≤–≤–æ–¥–∏—Ç—å —Å—É–º–º—É:', reply_markup= await get_pay())
    await callback.message.edit_reply_markup(reply_markup=None)
    


# ============ ‚§¥Ô∏è Send to user =========
@dp.callback_query_handler(text='send_to_user')
async def send_to_user(callback: types.CallbackQuery):
    markup = InlineKeyboardMarkup(resize_keyboard=True)
    btn1 = InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞', callback_data='cancel')
    markup.add(btn1)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=markup)


# =============== üóÉ Transaction History ================
@dp.callback_query_handler(text='history')
async def transaction(callback: types.CallbackQuery):
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', reply_markup=await wallet_buttons())
    
    
# ================ üéÅ Activate promo code ================
@dp.callback_query_handler(text='promo_code')
async def activate_promokod(callback: types.CallbackQuery):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥', reply_markup=await promokod())
    


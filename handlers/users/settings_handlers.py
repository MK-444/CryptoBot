# aiogram
from aiogram.dispatcher.filters import Text
from aiogram.types import  CallbackQuery
from aiogram import Bot, Dispatcher, executor, types 
from aiogram.types import ReplyKeyboardRemove, ParseMode
from aiogram.dispatcher import FSMContext
# from aiogram.types.message import ContentType
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# python libraries
import logging 
import pyotp
import os 

# pip install libraries
from py_currency_converter import convert
from pycoingecko import CoinGeckoAPI
from dotenv import load_dotenv
import qrcode

# import files
from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode

from keyboards.inline.exchange_inline import *
from keyboards.inline.wallet_inline import *
from keyboards.inline.base_inline import *
from keyboards.inline.settings_inline import *
from keyboards.inline.info_inline import *
from keyboards.default.default import *
from functions.message import *

from states.state import *
from loader import dp, bot



# ========================== ‚öôÔ∏è Settings ========================
@dp.message_handler(Text(equals='‚öôÔ∏è Settings'))
async def get_settings(message: types.Message):
    await message.answer(message.text, reply_markup=await settings_buttons())


@dp.callback_query_handler(text='fa2')
async def get_2fa(callback: types.CallbackQuery):
    """=============== üîí 2FA ============"""
    await callback.message.answer(twofactory,reply_markup= await fa2_btn())

@dp.callback_query_handler(text='twofactory')
async def create_2fa_input(callback: types.CallbackQuery):
    """========== üîí 2FA -> Add 2FA ============"""
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ 2FA')
    await ProfileStatesGroup.name.set() 

@dp.message_handler(state=ProfileStatesGroup.name)
async def confirm_2fa(message: types.Message, state:FSMContext):
    """=============== Add 2FA ============"""
    global msg 
    msg = message.text
    await ProfileStatesGroup.next()
    await message.answer(f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ 2FA –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ `{msg}`',  parse_mode=types.ParseMode.MARKDOWN, reply_markup=await confirm_btn())
    await ProfileStatesGroup.confirm.set()


@dp.callback_query_handler(text='right', state=ProfileStatesGroup.confirm)
async def get_2fa_input(callback: types.CallbackQuery, state:FSMContext):
    """========== üîí 2FA -> Add 2FA ============"""
    await callback.message.answer('2FA –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
    global secret_key
    secret_key = pyotp.random_base32()
    url = pyotp.totp.TOTP(secret_key).provisioning_uri(msg, issuer_name="MKCryptoBot")
    qr = qrcode.QRCode(version = 1, box_size = 7, border = 4)
    qr.add_data(url)
    qr.make(fit = True)
    img = qr.make_image(fill_color="black", back_color="white")
    img.save('/home/maria/–î–æ–∫—É–º–µ–Ω—Ç—ã/IT/MKcryptoBot/handlers/users/qrcodes/MyQRCode2fac.png')
    k = open('/home/maria/–î–æ–∫—É–º–µ–Ω—Ç—ã/IT/MKcryptoBot/handlers/users/qrcodes/MyQRCode2fac.png', 'rb')
    authe = f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å 2FA {msg}\n\
\n\
–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –Ω–∏–∂–µ:\n\
\n\
`{secret_key}`\n\
\n\
–ö–æ–¥ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ª–∏—à—å 1 —Ä–∞–∑ –∏ —É–¥–∞–ª–µ–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n\
\n\
–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è 2FA –Ω–∞–ø–∏—à–∏—Ç–µ —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥"
    await bot.send_photo(callback.from_user.id, photo=k, caption=authe, parse_mode=ParseMode.MARKDOWN)
    await ProfileStatesGroup.six_digit_code.set()
    
    
@dp.message_handler(state=ProfileStatesGroup.six_digit_code)
async def cmd_create(message: types.Message, state:FSMContext):
    """=============== Add 2FA ============"""
    global msg_code 
    msg_code = message.text
    totp = pyotp.TOTP(secret_key)
    if totp.verify(msg_code):
        await message.answer("Code is valid.")
    else:
        await message.answer("Invalid code.")
    await state.finish()


@dp.callback_query_handler(text='uid')
async def get_uid(callback: types.CallbackQuery):
    """======== üë§ My UID =========="""
    await callback.message.answer(f'Your üë§ UID:{uid}', reply_markup=await buy_btn())


